import numpy as np
import pandas as ps
from pathlib import Path
from collections import OrderedDict
from catalyst.dl import ConfigExperiment
from sklearn.model_selection import train_test_split
from .utils import DataStorage
from .datasets import CTCCollateFn
from .datasets import DFDataset as ExpDataset
from .datasets.augmentations import (
    Sequential,
    OneOf,
    NoAugmentation,
    Noise,
    TimeShifting,
    TimeStretch,
    Pitch,
    MinMaxScale,
    Normalization,
    ConstantNormalization,
    FrequencyNormalization,
    LogMagnitude,
)

# should be computed based on normalization method
DS_LOG_MAGNITUDE_MEAN = [0.3257931172847748,0.5944935083389282,1.0501134395599365,1.3156698942184448,1.3396490812301636,1.284938097000122,1.2099190950393677,1.208755612373352,1.1693472862243652,1.0720810890197754,0.9422860741615295,0.7927262783050537,0.6737245917320251,0.5935185551643372,0.5272749066352844,0.46990063786506653,0.4299018383026123,0.41357743740081787,0.4055590331554413,0.3993624448776245,0.3986057937145233,0.4005190432071686,0.39726781845092773,0.3989250659942627,0.4026676416397095,0.39729273319244385,0.39326387643814087,0.38341957330703735,0.37077197432518005,0.36078521609306335,0.3478163480758667,0.33399543166160583,0.322491854429245,0.31095463037490845,0.29906055331230164,0.29227957129478455,0.28499841690063477,0.2807202935218811,0.27816227078437805,0.27798518538475037,0.27542269229888916,0.2725091874599457,0.2712372839450836,0.2657417058944702,0.2600986957550049,0.2543638050556183,0.24989143013954163,0.24475644528865814,0.24183395504951477,0.24469353258609772,0.24548089504241943,0.24435898661613464,0.2441754788160324,0.24351653456687927,0.2392234355211258,0.23327860236167908,0.2261279821395874,0.2185090035200119,0.2133495807647705,0.210047647356987,0.20692403614521027,0.20403724908828735,0.2027970552444458,0.2029263973236084,0.20457503199577332,0.20950910449028015,0.21610373258590698,0.22010459005832672,0.22826185822486877,0.238558828830719,0.24873878061771393,0.2579963207244873,0.2636334002017975,0.26530641317367554,0.26380541920661926,0.2597964406013489,0.25393298268318176,0.24631871283054352,0.23842227458953857,0.2307160645723343,0.21856988966464996,0.20773248374462128,0.19990956783294678,0.19499103724956512,0.19138038158416748,0.1876213550567627,0.18311849236488342,0.17743821442127228,0.17159394919872284,0.1651201695203781,0.15825694799423218,0.15320640802383423,0.1484244167804718,0.1452900469303131,0.1427561491727829,0.1385703831911087,0.13521569967269897,0.13225580751895905,0.1298532336950302,0.12787745893001556,0.1259857416152954,0.12462745606899261,0.1234130859375,0.1225411668419838,0.12254085391759872,0.12279124557971954,0.12265156954526901,0.1218295767903328,0.12116401642560959,0.12141016125679016,0.12085932493209839,0.11981859058141708,0.12063605338335037,0.12194707989692688,0.12336753308773041,0.1247577890753746,0.12597674131393433,0.12654036283493042,0.12745435535907745,0.1284586787223816,0.12969356775283813,0.1317722499370575,0.13384540379047394,0.13561859726905823,0.1373777687549591,0.13906355202198029,0.14019885659217834,0.14009422063827515,0.13951493799686432,0.13802404701709747,0.1357535719871521,0.13497354090213776,0.13425414264202118,0.13341070711612701,0.1325010061264038,0.1313372254371643,0.13046830892562866,0.1294873058795929,0.1280243992805481,0.1262386590242386,0.1244165301322937,0.12311764806509018,0.12128593772649765,0.11927293986082077,0.11307243257761002,0.07560861110687256,0.023264307528734207,0.009817901998758316,0.008244363591074944,0.008088279515504837,0.007974616251885891,0.007865794003009796,0.0077794757671654224,0.007701305206865072,0.007639050483703613,0.007593076676130295,0.007546302862465382,0.007515785284340382,0.007492015138268471,0.007474367972463369,0.007459233049303293]
DS_LOG_MAGNITUDE_STD = [0.23645862936973572,0.34909772872924805,0.688994288444519,0.8913742899894714,0.9414251446723938,0.9518932700157166,0.9351350665092468,0.9606428742408752,0.9583603739738464,0.9176660180091858,0.8468661904335022,0.7615327835083008,0.6862497925758362,0.6241577863693237,0.5630494356155396,0.5043684244155884,0.4583122134208679,0.44201329350471497,0.4360676109790802,0.4379012882709503,0.44450506567955017,0.4522291123867035,0.4576740562915802,0.46302369236946106,0.47028860449790955,0.4696386456489563,0.4681777358055115,0.45821109414100647,0.4437338709831238,0.43091726303100586,0.4145614802837372,0.39565882086753845,0.38163384795188904,0.36894911527633667,0.35338151454925537,0.34218674898147583,0.3333646357059479,0.3288223445415497,0.3274933695793152,0.3276475965976715,0.32592639327049255,0.3223767876625061,0.31882530450820923,0.3123796582221985,0.30403515696525574,0.2959887981414795,0.2901102304458618,0.2844930589199066,0.2842881977558136,0.287476122379303,0.28853192925453186,0.2884840667247772,0.2886776030063629,0.288637638092041,0.286216676235199,0.2813289761543274,0.2753550708293915,0.269942045211792,0.26441261172294617,0.2593560516834259,0.2553018033504486,0.25120583176612854,0.2483864426612854,0.24699294567108154,0.2482154667377472,0.2525097727775574,0.2597838044166565,0.26836097240448,0.27645716071128845,0.28465282917022705,0.2933942377567291,0.3018249273300171,0.3077390193939209,0.30927300453186035,0.3075335919857025,0.30392399430274963,0.29874882102012634,0.2922815680503845,0.2845099866390228,0.27543801069259644,0.26549118757247925,0.2554807960987091,0.24844704568386078,0.2438637912273407,0.24035456776618958,0.2374393194913864,0.2336978018283844,0.22984695434570312,0.22639530897140503,0.22245430946350098,0.21875719726085663,0.21713727712631226,0.21596553921699524,0.21198387444019318,0.20816348493099213,0.20595650374889374,0.20447227358818054,0.20321445167064667,0.20205973088741302,0.20101472735404968,0.20041559636592865,0.20043502748012543,0.20062200725078583,0.20038332045078278,0.20071691274642944,0.20176316797733307,0.20204724371433258,0.20184046030044556,0.20126277208328247,0.201579287648201,0.20154216885566711,0.20240578055381775,0.20436061918735504,0.2062470018863678,0.20788362622261047,0.20922650396823883,0.2103072851896286,0.2109670341014862,0.21112914383411407,0.21067239344120026,0.21035568416118622,0.21056826412677765,0.21081258356571198,0.21027527749538422,0.2097449004650116,0.20971912145614624,0.2096288651227951,0.2086416482925415,0.20723216235637665,0.20466285943984985,0.20286095142364502,0.20186957716941833,0.20090854167938232,0.19961141049861908,0.19844941794872284,0.19779831171035767,0.19740523397922516,0.19713963568210602,0.19655732810497284,0.19550471007823944,0.1947801560163498,0.19463662803173065,0.19398564100265503,0.19270972907543182,0.18644686043262482,0.13380616903305054,0.039328865706920624,0.011882147751748562,0.009881410747766495,0.009688903577625751,0.009556835517287254,0.009437178261578083,0.009346848353743553,0.009261872619390488,0.009204240515828133,0.009168594144284725,0.009131557308137417,0.009099403396248817,0.009082494303584099,0.009057647548615932,0.009026804007589817]


NORMALIZATIONS = Sequential(
    # ConstantNormalization(
    #     mean=0.00077165657421574,
    #     std=0.18489263951778412,
    # ),
    LogMagnitude(
        sample_rate=16_000, 
        window_size=0.02,
        window_stride=0.01,
        window="hamming",
    ),
    FrequencyNormalization(
        mean=np.array(DS_LOG_MAGNITUDE_MEAN),
        std=np.array(DS_LOG_MAGNITUDE_STD),
    )
)


DATA_STORAGE = DataStorage()
TRAIN_AUGMENTATIONS = Sequential(
    OneOf(
        Noise((0, 0.005)),
        TimeShifting(max_shift=0.1),
        TimeStretch((0.5, 2)),
        NoAugmentation(),
        Pitch(16_000, pitch_factor=(1, 10))
    ),
    NORMALIZATIONS,
)
VALID_AUGMENTATIONS = NORMALIZATIONS


class Experiment(ConfigExperiment):
    def get_datasets(self, 
                     stage: str,
                     data_dir: str,
                     train_data: str,
                     valid_data: str,
                     **kwargs) -> OrderedDict:

        datasets = OrderedDict()
        datasets["train"] = dict(
            dataset=ExpDataset(
                ps.read_csv(train_data), 
                data_dir=data_dir,
                sound_files_col="sound",
                text_files_col="text",
                augmentations=TRAIN_AUGMENTATIONS
            ),
            collate_fn=CTCCollateFn("features", "targets"),
            shuffle=True,
            pin_memory=True,
        )
        print(" * Train dataset size -", len(datasets["train"]["dataset"]), flush=True)
        
        datasets["valid"] = dict(
            dataset=ExpDataset(
                ps.read_csv(valid_data), 
                data_dir=data_dir,
                sound_files_col="sound",
                text_files_col="text",
                augmentations=VALID_AUGMENTATIONS
            ),
            collate_fn=CTCCollateFn("features", "targets"),
            shuffle=False,
        )
        print(" * Valid dataset size -", len(datasets["valid"]["dataset"]), flush=True)
        return datasets

